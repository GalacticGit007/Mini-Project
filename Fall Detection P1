// Fall Detection Phase 1

#include <Wire.h>

const int MPU_addr = 0x68;  // I2C address of the MPU-6050
int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;
float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0;
boolean fall = false;       // stores if a fall has occurred
boolean trigger1 = false;   // first trigger (lower threshold)
boolean trigger2 = false;   // second trigger (upper threshold)
boolean trigger3 = false;   // third trigger (orientation change)
byte trigger1count = 0;     // counts since trigger 1 was activated
byte trigger2count = 0;     // counts since trigger 2 was activated
byte trigger3count = 0;     // counts since trigger 3 was activated
int angleChange = 0;

void setup() {
  Serial.begin(115200);
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B);  // PWR_MGMT_1 register
  Wire.write(0);     // Wake up MPU-6050
  Wire.endTransmission(true);
  Serial.println("MPU6050 Initialized");
}

void loop() {
  mpu_read();
  
  // Convert raw sensor data to G-forces
  ax = (AcX - 2050) / 16384.00;
  ay = (AcY - 77) / 16384.00;
  az = (AcZ - 1947) / 16384.00;
  
  // Convert gyro data to degrees/sec
  gx = (GyX + 270) / 131.07;
  gy = (GyY - 351) / 131.07;
  gz = (GyZ + 136) / 131.07;

  // Calculate amplitude vector
  float Raw_Amp = sqrt(pow(ax, 2) + pow(ay, 2) + pow(az, 2));
  int Amp = Raw_Amp * 10;  // Scaled for better threshold comparison

  // Print the Amp value
  Serial.print("Amp Value: ");
  Serial.println(Amp); // Print the amplitude value

  // Fall detection algorithm
  if (Amp <= 4 && !trigger2) {
    trigger1 = true;
    Serial.println("Lower Threshold Activated");
  }

  if (trigger1) {
    trigger1count++;
    if (Amp >= 12) {
      trigger2 = true;
      trigger1 = false;
      trigger1count = 0;
      Serial.println("Upper Threshold Activated");
    }
  }

  if (trigger2) {
    trigger2count++;
    fall = true;
    angleChange = sqrt(pow(gx, 2) + pow(gy, 2) + pow(gz, 2));
    
    if (angleChange >= 30 && angleChange <= 400) {
      trigger3 = true;
      trigger2 = false;
      trigger2count = 0;
      Serial.println("Orientation Change Detected");
    }
  }

  if (trigger3) {
    trigger3count++;
    if (trigger3count >= 10) {
      angleChange = sqrt(pow(gx, 2) + pow(gy, 2) + pow(gz, 2));
      
      if (angleChange >= 0 && angleChange <= 10) {
        //fall = true;
        trigger3 = false;
        trigger3count = 0;
      } else {
        trigger3 = false;
        trigger3count = 0;
        Serial.println("Orientation Reset");
      }
    }
  }

  if (fall) {
    Serial.println("FALL DETECTED!");
    fall = false;
  }

  // Reset triggers if no follow-up detection
  if (trigger2count >= 6) {
    trigger2 = false;
    trigger2count = 0;
    Serial.println("Upper Threshold Reset");
  }

  if (trigger1count >= 6) {
    trigger1 = false;
    trigger1count = 0;
    Serial.println("Lower Threshold Reset");
  }

  delay(100);
}


void mpu_read() {
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B);  // Start with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true);
  
  AcX = Wire.read() << 8 | Wire.read();
  AcY = Wire.read() << 8 | Wire.read();
  AcZ = Wire.read() << 8 | Wire.read();
  Tmp = Wire.read() << 8 | Wire.read();
  GyX = Wire.read() << 8 | Wire.read();
  GyY = Wire.read() << 8 | Wire.read();
  GyZ = Wire.read() << 8 | Wire.read();
}
